<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>HomeLab Documents</title><link href="https://ignorantforager.com/" rel="alternate"/><link href="https://ignorantforager.com/feeds/all.atom.xml" rel="self"/><id>https://ignorantforager.com/</id><updated>2025-10-22T00:00:00-07:00</updated><entry><title>How to Protect Your Digital Life</title><link href="https://ignorantforager.com/how-to-protect-your-digital-life.html" rel="alternate"/><published>2025-10-22T00:00:00-07:00</published><updated>2025-10-22T00:00:00-07:00</updated><author><name>Cadence James</name></author><id>tag:ignorantforager.com,2025-10-22:/how-to-protect-your-digital-life.html</id><summary type="html">&lt;h2&gt;Are Your Passwords as Strong as You Think? How to Protect Your Digital Life&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;A quick note: This article was originally written as an assignment for a college course and has been updated and adapted for my website.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In an era of ever-evolving cyber threats, robust password practices and trustworthy password managers are crucial for protecting both personal and corporate data. While new technologies like biometrics and passkeys are on the rise, passwords remain a ubiquitous part of our daily online lives, making their security a top priority.&lt;/p&gt;
&lt;h3&gt;The Reality of Password Habits&lt;/h3&gt;
&lt;p&gt;Recent statistics from various cybersecurity sources paint …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Are Your Passwords as Strong as You Think? How to Protect Your Digital Life&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;A quick note: This article was originally written as an assignment for a college course and has been updated and adapted for my website.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In an era of ever-evolving cyber threats, robust password practices and trustworthy password managers are crucial for protecting both personal and corporate data. While new technologies like biometrics and passkeys are on the rise, passwords remain a ubiquitous part of our daily online lives, making their security a top priority.&lt;/p&gt;
&lt;h3&gt;The Reality of Password Habits&lt;/h3&gt;
&lt;p&gt;Recent statistics from various cybersecurity sources paint a concerning picture of password security. Consider these facts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A staggering &lt;strong&gt;84% of users admit to reusing passwords&lt;/strong&gt; across multiple sites.&lt;/li&gt;
&lt;li&gt;Globally, &lt;strong&gt;only about 34% of people use a password manager&lt;/strong&gt; to keep their accounts secure.&lt;/li&gt;
&lt;li&gt;At work, the situation isn't much better, with &lt;strong&gt;only 25% of users worldwide being required to use a password manager&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Worryingly, &lt;strong&gt;41.7% of employees have shared their workplace passwords&lt;/strong&gt;, with many sharing them with family members or friends.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These numbers highlight a critical vulnerability in our collective online security. But what can we do to improve? The answer lies in creating strong passwords, eliminating password reuse, and utilizing password managers.&lt;/p&gt;
&lt;h3&gt;The Building Blocks of a Strong Password&lt;/h3&gt;
&lt;p&gt;According to the Cybersecurity &amp;amp; Infrastructure Security Agency (CISA), three simple steps can significantly boost your password security:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Go for Length:&lt;/strong&gt; Aim for at least 16 characters or more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embrace Randomness:&lt;/strong&gt; Use a random mix of characters or a passphrase of 4-7 unrelated words.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep it Unique:&lt;/strong&gt; Use a different password for every single account.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The strength of a password can be measured by its "password entropy," which in simple terms, is how hard it is for someone to guess. The higher the entropy (measured in bits), the more secure the password. You can increase entropy by making your password longer and more complex.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Password Entropy and Strength" src="./images/password_entropy.png"&gt;&lt;/p&gt;
&lt;p&gt;While adding a mix of lowercase and uppercase letters, numbers, and special characters (like !@#$%) increases the pool of possible characters for a hacker to guess from, &lt;strong&gt;randomness is key&lt;/strong&gt;. A password like &lt;code&gt;Password123!&lt;/code&gt; is not as strong as it seems because it follows common patterns. As CISA warns, "Using an easy-to-guess password is like locking the door but leaving the key in the lock." Your passwords should ideally be random and not personally identifiable.&lt;/p&gt;
&lt;p&gt;The third step is a fundamental rule of password hygiene: &lt;strong&gt;don't reuse passwords&lt;/strong&gt;. If one account is compromised, using unique passwords for each of your other accounts prevents a domino effect of security breaches. But how can you possibly remember a unique, 16+ character password for every online account? That’s where password managers come in.&lt;/p&gt;
&lt;h3&gt;Password Managers: Your Digital Vault&lt;/h3&gt;
&lt;p&gt;Storing all your passwords in one place might sound counterintuitive, but the technology behind password managers makes it a secure and efficient solution.&lt;/p&gt;
&lt;p&gt;Here’s how they work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encrypted Vault:&lt;/strong&gt; All your passwords are stored in a heavily encrypted vault.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Master Password:&lt;/strong&gt; This vault is locked with a single, strong master password. Without it, accessing the stored information is nearly impossible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modern password managers also come with a suite of features to enhance your security:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Password Generation:&lt;/strong&gt; They can create strong, random passwords for you, which you don't have to remember.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Health Monitoring:&lt;/strong&gt; They can assess the strength of your existing passwords, identify reused passwords, and even alert you if your credentials have been exposed in a data breach.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Future is Passwordless: Exploring Alternatives&lt;/h3&gt;
&lt;p&gt;While password managers help us cope with passwords, the ultimate goal for the tech industry is to eliminate them entirely. Several exciting and more secure alternatives are becoming increasingly common.&lt;/p&gt;
&lt;h4&gt;Passkeys&lt;/h4&gt;
&lt;p&gt;Passkeys are quickly replacing passwords on major platforms. Instead of a password you create, a passkey uses a unique cryptographic key pair. A private key is stored securely on your device (like your phone or computer), and a public key is stored on the website's server. To log in, you simply authenticate on your device using your fingerprint, face, or PIN. This method is resistant to phishing and much easier for users.&lt;/p&gt;
&lt;h4&gt;Hardware Keys and Tokens&lt;/h4&gt;
&lt;p&gt;For an even higher level of security, many people use hardware authentication.
*   &lt;strong&gt;Physical Security Keys (e.g., YubiKey):&lt;/strong&gt; These are small devices that you plug into your computer's USB port or tap on your phone (using NFC). When you log in, you must physically touch the key to approve the login, proving that you are present. This method is a form of Multi-Factor Authentication (MFA).
*   &lt;strong&gt;Smart Cards (e.g., CACs):&lt;/strong&gt; Common Access Cards (CACs) are used extensively by the military and other government agencies. They are a type of smart card that contains a chip with the user's credentials and requires a card reader and a PIN to authenticate.
*   &lt;strong&gt;Authentication Tokens:&lt;/strong&gt; These can be hardware fobs that generate a rotating code every 30-60 seconds or software-based authenticators on your phone. You enter the code along with your password to prove your identity.&lt;/p&gt;
&lt;p&gt;These methods provide robust protection against remote attacks and are becoming the standard for securing sensitive accounts.&lt;/p&gt;
&lt;h3&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;In today's digital world, safeguarding our data is non-negotiable. While strong password habits are a great start, the future of digital security lies in passwordless solutions. By embracing technologies like passkeys and hardware tokens and using a password manager for any remaining password-based accounts, we can create a much safer online experience for everyone.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Sources&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Cybersecurity &amp;amp; Infrastructure Security Agency. (n.d.). &lt;em&gt;Use strong passwords&lt;/em&gt;. U.S. Department of Homeland Security. Retrieved from https://www.cisa.gov/secure-our-world/use-strong-passwords&lt;/p&gt;
&lt;p&gt;Cruz, B., &amp;amp; Turner, G. (2025). &lt;em&gt;The best password managers of 2025&lt;/em&gt;. Security.org. Retrieved from https://www.security.org/password-manager/&lt;/p&gt;
&lt;p&gt;Smith, D. A. (2022, October 27). &lt;em&gt;Top 15 password management best practices&lt;/em&gt;. BeyondTrust. Retrieved from https://www.beyondtrust.com/blog/entry/top-15-password-management-best-practices&lt;/p&gt;</content><category term="security"/><category term="password"/></entry><entry><title>Building a 300TB NAS and the Hardware That Hated Me</title><link href="https://ignorantforager.com/building-a-300tb-nas-and-the-hardware-that-hated-me.html" rel="alternate"/><published>2025-10-08T00:00:00-07:00</published><updated>2025-10-08T00:00:00-07:00</updated><author><name>Cadence James</name></author><id>tag:ignorantforager.com,2025-10-08:/building-a-300tb-nas-and-the-hardware-that-hated-me.html</id><summary type="html">&lt;h2&gt;Part 1: Building a 300TB NAS and the Hardware That Hated Me&lt;/h2&gt;
&lt;p&gt;It started with an exciting vision: to build a true "endgame" home server. The goal was to consolidate my sprawling setup into a single, powerful All-in-One server. I already had the chassis, a 45Drives HL15, and the storage—fifteen 20TB Seagate drives ready to go. Now, I just needed to pick the brains of the operation.&lt;/p&gt;
&lt;p&gt;After a bit of research, I landed on what felt like a killer combo for a TrueNAS SCALE build.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Final Parts List (after all my troubleshooting):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Case:&lt;/strong&gt; 45Drives HL15&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Motherboard:&lt;/strong&gt; Supermicro …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Part 1: Building a 300TB NAS and the Hardware That Hated Me&lt;/h2&gt;
&lt;p&gt;It started with an exciting vision: to build a true "endgame" home server. The goal was to consolidate my sprawling setup into a single, powerful All-in-One server. I already had the chassis, a 45Drives HL15, and the storage—fifteen 20TB Seagate drives ready to go. Now, I just needed to pick the brains of the operation.&lt;/p&gt;
&lt;p&gt;After a bit of research, I landed on what felt like a killer combo for a TrueNAS SCALE build.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Final Parts List (after all my troubleshooting):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Case:&lt;/strong&gt; 45Drives HL15&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Motherboard:&lt;/strong&gt; Supermicro X13SAE-F&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU:&lt;/strong&gt; Intel Core i5-13500 (13th Gen)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU Cooler:&lt;/strong&gt; Noctua NH-D9L (2x NF-A9 92mm fan)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PSU:&lt;/strong&gt; Seasonic GX-1000&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boot Drives:&lt;/strong&gt; 2x 1TB Samsung 990 EVO (Mirrored)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RAM:&lt;/strong&gt; 2x Supermicro 32GB DDR5-4800 ECC UDIMM&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HBA:&lt;/strong&gt; LSI 9300-16i&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OS:&lt;/strong&gt; TrueNAS SCALE&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hard Drives:&lt;/strong&gt; 4x 20TB Seagate Iron Wolf Pro, 11x Refurbished 20TB Seagate Exos X20&lt;blockquote&gt;
&lt;p&gt;I originally was going to build with all Seagate Iron Wolf Pros and purchased five to start. However, I soon learned that refurbished drives can be just as reliable, if not more so (as you'll see later on).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With everything ordered, I was ready for a straightforward build. What I got instead was a multi-week saga of troubleshooting.&lt;/p&gt;
&lt;h3&gt;Chapter 1: The DOA Motherboard and RAM Fiasco&lt;/h3&gt;
&lt;p&gt;I started assembling the build, eager to get it running. The first snag hit when I tried to install the RAM. Originally, I had bought two sticks of "Samsung 32GB DDR5 ECC RDIMM." When they arrived, I realized my mistake: RDIMM ("Registered") modules are for heavy-duty enterprise servers and don't work with my consumer-grade CPU and workstation motherboard. The sticks literally wouldn't fit.&lt;/p&gt;
&lt;p&gt;Frustrated with myself for this simple oversight, I sent them back and ordered a non-ECC kit that would work: a "Crucial Pro 96GB DDR5 RAM Kit (2x48GB)." With the new RAM installed, I finished the build. I hit the power switch. And… nothing. Not a single click, fan spin, or light.&lt;/p&gt;
&lt;p&gt;This kicked off my first deep dive into troubleshooting. I started with the most likely culprits. First, the PSU. I unplugged the 24-pin motherboard connector, attached the PSU’s included jumper, and everything in the case (PSU fan, case fans) spun to life. So, the PSU was good. Next, I suspected a short circuit. I pulled the entire motherboard out of the case, placed it on its box, connected only the CPU, the new Crucial RAM, and the 24-pin and 8-pin power cables. I jumped the power pins with a screwdriver. Still dead. The real clue was the lack of any standby "heartbeat" LED. A server board (and especially one with IPMI) should have a light on, even when "off" and mine was completely dark. The board I bought used from eBay seemed DOA. Just to make sure, I busted out a brand new PSU that I had laying around from a previous desktop build a few years ago. I hooked this up with the same minimal components. All the same indications. No power on unless I jumped the 24-pin cable. This verified that the PSU was good. Just for good measure, I went through the motherboard manual and identified any jumpers that might be set in the wrong position and might prohibit the board from powering on. I cleared the CMOS and even replaced the CMOS battery entirely. All to no avail. The motherboard was indeed DOA. I initiated a return and refund, then ordered the same model, but this time from a third-party seller on Amazon. (The original motherboard was from a seller on eBay with a great reputation. It looks like it was an unfortunate situation and no fault of theirs. I don't blame them whatsoever).&lt;/p&gt;
&lt;h3&gt;Chapter 2: The Zombie Board and the BIOS Mystery&lt;/h3&gt;
&lt;p&gt;The second motherboard arrived. This time, when I plugged it in, I got that beautiful little green standby light. It was alive! But when I jumped the power pins, it still refused to turn on. The board had power but was &lt;em&gt;still&lt;/em&gt; not POST-ing. My first thought was a configuration issue, so I turned to the IPMI remote management. I connected it to my network, found its IP, and tried the default &lt;code&gt;admin&lt;/code&gt;/&lt;code&gt;admin&lt;/code&gt; credentials. They didn't work. I found a sticker on the board with the motherboards unique BMC password, but those credentials didn't work either. Supermicro does have a tool to change the BMC password or even factory reset the BMC entirely. However, it needs the system to boot in order to load a DOS image or use the UEFI shell to run the tool. As I couldn't even boot my system, I was locked out.&lt;/p&gt;
&lt;p&gt;I ended up swapping out the RAM thinking that maybe for some reason the Crucial RAM I had purchased wasn't compatible with the setup. I ended up going with two sticks of "Supermicro 32GB DDR5-4800 ECC UDIMM". This didn't solve the issue either, unfortunately. This led me to a new theory: what if the BIOS was too old to recognize my 13th Gen CPU? The motherboard was originally released during the 12th generation series of CPUs. I did question myself on this one. I thought an incompatible CPU would still let the system power on, maybe giving a beep code or a "CPU not supported" message on the screen. I never imagined it would cause a complete failure to POST. But with all other variables exhausted, it was the only theory that made sense.&lt;/p&gt;
&lt;p&gt;To test it, I ordered the cheapest compatible 12th Gen CPU I could find at the time, an Intel i3-12100F, to act as a "key." I swapped it in, and just like that, the server powered on and POSTed. It worked. The BIOS incompatibility was the culprit.&lt;/p&gt;
&lt;p&gt;With the system finally booting, I updated the BIOS to the latest version. Annoyingly, even after the update, the IPMI credentials still did not work. So, I booted into the UEFI shell, ran Supermicro's IPMICFG tool to factory reset the BMC and, &lt;em&gt;finally&lt;/em&gt;, I was able to log in and set a new password. After everything was verified working on my original CPU, I returned the i3-12100F.&lt;/p&gt;
&lt;h3&gt;Chapter 3: An HBA Saga and a Bad Drive&lt;/h3&gt;
&lt;p&gt;With the server booting with the i5-13500 and proper ECC RAM, it was time for storage. I installed my HBA card from my previous server, which I had flashed to IT Mode years ago. I booted up TrueNAS, and… no drives.&lt;/p&gt;
&lt;p&gt;After a slew of research, I learned that my "HBA" card that I had used in the past wasn't actually an HBA card at all, but rather a SAS Expander. Meant to be used &lt;em&gt;with&lt;/em&gt; an HBA. My old server must have had a built-in HBA on the motherboard that I either didn't realize or completely forgot about. With this understanding, I ordered a proper, modern HBA: an LSI 9300-16i. As soon as I installed it, TrueNAS detected all 15 drives. Success!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For structuring the storage, I opted for a single ZFS pool built from three separate, 5-drive RAIDZ2 vdevs. This specific layout, rather than one massive 15-drive vdev, offers two critical advantages for an all-in-one server. Firstly, it dramatically improves performance; since ZFS stripes data across vdevs, having three of them provides roughly triple the random I/O operations per second (IOPS), which is essential for keeping virtual machines and applications like Plex feeling responsive. Secondly, it drastically increases safety and reduces rebuild times. Each vdev is configured as RAIDZ2, meaning every 5-drive group can lose any two drives without any data loss. Should a drive fail, ZFS only needs to resilver the data within that single, smaller vdev. This process is significantly faster and puts far less stress on the remaining drives than rebuilding a giant 15-drive array, which is a crucial consideration for the long-term health of a pool built with massive 20TB drives.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before loading any data, my first order of business was to kick off a ZFS scrub. This is ZFS's built-in data integrity check, where it systematically reads every block of data across all the drives to ensure it matches stored checksums, proactively searching for any silent corruption or hardware errors. On a new, empty pool, it should be fast, but  still take a few minutes to check all the ZFS metadata distributed across the drives. It finished in &lt;strong&gt;one second&lt;/strong&gt; with zero errors. This was a huge red flag. It meant the scrub wasn't actually running.&lt;/p&gt;
&lt;p&gt;This led me down yet another troubleshooting journey. The HBA, an LSI 9300-16i, was showing up as two separate controllers. Using the TrueNAS shell, I verified the firmware of the controllers using &lt;code&gt;sas3flash -listall&lt;/code&gt;. This showed me both controllers and the firmware they were on: "16.00.10.00". While this was the latest firmware for the device, there is a TrueNAS specific firmware "16.00.12.00". I downloaded the TrueNAS firmware from their forums (as far as I'm aware, the TrueNAS specific firmware isn't even available on the LSI website).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I did end up having to create a dataset in my pool as &lt;code&gt;/mnt/mainpool/temp&lt;/code&gt;. I then created an SMB share so I could mount it on my computer and transfer the firmware to this dataset to use. I also use this "temporary" dataset later on as you'll see.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I changed directories to the temp dataset and used the SAS 3 Flash tool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sas3flash -o -f SAS9300-16i_IT.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I did the listall command again, but saw that only the first controller was flashed. I tried to flash the second controller specifically with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sas3flash -c 1 -o -f SAS9300-16i_IT.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(the '-c 1' portion points the flash tool to the second controller). This didn't work. I then attempted using the flag "-fwall" to update the firmware on ALL controllers. That didn't work either. I was stumped. I pored over a bunch of forum posts and eventually came across one that said to use the flag &lt;code&gt;-nossid&lt;/code&gt;. I attempted running this full command: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sas3flash -c 1 -o -f SAS9300-16i_IT.bin -nossid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and it finally worked. This command essentially tells the flash tool to ignore the error it was getting about the SubSystem ID not matching. Both of the controllers were now on the latest "16.00.12.00", TrueNAS specific firmware.&lt;/p&gt;
&lt;p&gt;I attempted to run the scrub again, but still no dice. It completed immediately with zero issues. Frustrated, I decided to run a simple stress test: write a large file and check its integrity. The write was fast, but when I ran a checksum on the file, &lt;code&gt;dmesg&lt;/code&gt; lit up with "Unrecovered read error" from drive &lt;code&gt;/dev/sdj&lt;/code&gt;. This was it. One of my brand new 20TB drives was faulty, and this critical hardware error was causing the ZFS scrub to abort.&lt;/p&gt;
&lt;p&gt;To be 100% sure, I ran a SMART test on the suspect drive. It failed within five minutes and just 10% into the test. That was all the proof I needed. I purchased a new drive to get the system up and running immediately and started the RMA process for the failed one, which will soon become my first cold spare. After replacing the drive, the resilver was successful, and a new scrub ran perfectly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As an interesting note here, the drive that failed was one of the five original, brand new, Iron Wolf Pros that I had bought. This has definitely improved my, already good, outlook on using refurbished drives. I ended up replacing it with a refurbished Seagate Exos X20.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The hardware was, at long last, stable.&lt;/p&gt;
&lt;h3&gt;Chapter 4: The Great Migration&lt;/h3&gt;
&lt;p&gt;With the server ready, it was time to move approximately 40TB of data from my old server. I set up a direct 10GbE link between them. I set up a network between the two using "192.168.10.2/24" on my older server and "192.168.10.3/24" on my new server. My tool of choice was &lt;code&gt;rsync&lt;/code&gt;, and I included the &lt;code&gt;--checksum&lt;/code&gt; flag to guarantee data integrity.&lt;/p&gt;
&lt;p&gt;The first few small folders transferred fine. But when I started transferring my movies folder, the transfer got stuck for over an hour on "receiving incremental file list" before even starting the copy. I realized the &lt;code&gt;--checksum&lt;/code&gt; flag was forcing the old server to read every single byte of data &lt;em&gt;before&lt;/em&gt; the transfer. I killed the job, removed the flag and re-ran the command. It started copying almost immediately. The &lt;code&gt;rsync&lt;/code&gt; tool is robust and can pick up where it left off, and on a direct, stable link, the chance of a transfer error is tiny. I decided the speed increase was worth the minuscule risk. Even then, the transfer was slow, averaging 30-50MB/s with occasional jumps over 100MB/s.&lt;/p&gt;
&lt;p&gt;To manage this multi-day transfer, I used a crucial tool: &lt;code&gt;tmux&lt;/code&gt;. It lets you run terminal sessions that persist even if you get disconnected. My initial setup was simple:
1.  Start a session: &lt;code&gt;tmux&lt;/code&gt;
2.  Elevate to root: &lt;code&gt;sudo -i&lt;/code&gt;
3.  Start the copy using the command:
    &lt;code&gt;rsync -rltvhP root@192.168.10.2:/mnt/Zenodotus/Media/movies/ /mnt/mainpool/media/movies&lt;/code&gt;
4.  Detach, leaving the job running: 'Ctrl+b, d'.&lt;/p&gt;
&lt;p&gt;My movie folder transferred about 6.7TB in about 48 hours. Not great. I moved ahead with copying my television folder, knowing it would take a significant amount of time to fully transfer. It was about a quarter of the way through copying my television folder that I thought about updating my network settings on the direct link to use an MTU of 9000 (Jumbo Frames). Since it was a direct link, there was no risk of dropped packets that can happen on a switched network and it had the possibility of increasing the transfer speed. Unfortunately that didn't increase the speed at all. The only explanation left was my old server's fragmented ZFS pool as the bottleneck and I couldn't think of anything else to increase the speed. At least on the hardware side.&lt;/p&gt;
&lt;p&gt;About halfway through copying my television folder, I did decide to try and speed things up by splitting the transfer into two parallel &lt;code&gt;rsync&lt;/code&gt; jobs. The way I did this was to create two text files with half of the remaining folders in one text file and the rest in the second text file. Then I would start the rsync job again, but this time point the source at these files. Managing this in &lt;code&gt;tmux&lt;/code&gt; was easy: I created a second window (Ctrl+b, c) for the second &lt;code&gt;rsync&lt;/code&gt; job. I could then switch between them with 'Ctrl+b, 0' and 'Ctrl+b, 1'. In the first window, I ran the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rsync&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rltvhP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mainpool&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="mf"&gt;-1.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="mf"&gt;@192.168.10.2&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Zenodotus&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Television&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mainpool&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;television&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the second window:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rsync&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rltvhP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mainpool&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="mf"&gt;-2.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="mf"&gt;@192.168.10.2&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Zenodotus&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Television&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mainpool&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;television&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To my surprise, neither job slowed down and I was now getting nearly double the total throughput.&lt;/p&gt;
&lt;p&gt;It was about this time that I wished I was capturing stats. I realized the default &lt;code&gt;tmux&lt;/code&gt; history was only 2,000 lines, which wasn't enough to capture the full log. While the jobs were running, I increased the buffer:
&lt;code&gt;set-option -g history-limit 100000&lt;/code&gt;. This wouldn't recover the old history, but it ensured I could capture everything from then on. If I were to do this again, I’d set this at the very beginning, before I ran the initial rsync commands. Once a job finished, I could save the log with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tmux capture-pane -pS -100000 -t 0:0 &amp;gt; /mnt/mainpool/temp/rsync_job1_log.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(the &lt;code&gt;-t 0:0&lt;/code&gt; targets the first session, first window of &lt;code&gt;tmux&lt;/code&gt;. For the second window it would be &lt;code&gt;-t 0:1&lt;/code&gt;). I plan on going through and attempting to get any stats I can (e.g. average size of files transferred, average transfer speed, and average transfer time per file). It's not needed now that the transfer is fully complete, but it'd be nice to reference and see.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ideally I'd love to create something with those stats that could make /r/dataisbeautiful proud.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once this week-long migration was finished, I went through and ran the original rsync command again on both movies and tv shows in order to capture anything I missed from the split rsync jobs or any new files that appeared while running the jobs. There were only a few files and took less than an hour.&lt;/p&gt;
&lt;h3&gt;To Be Continued…&lt;/h3&gt;
&lt;p&gt;This build fought me to the very end. When I finally looked at the stable, running server, I realized that every single component (the motherboard, PSU, CPU, RAM, HBA, and even a hard drive) had been swapped out at least once. It was a true Server of Theseus, if you will. Rebuilt piece by piece on its journey to completion.&lt;/p&gt;
&lt;p&gt;After a journey that tested every bit of my patience, the physical build is complete. The hardware is stable and the data is home, but the project is only half done. In Part 2, I'll tackle the software: installing the full app stack, migrating my Plex metadata, and finally bringing this 300TB beast fully to life.&lt;/p&gt;</content><category term="homelab"/><category term="nas"/><category term="truenas"/><category term="hardware"/><category term="homelab"/><category term="storage"/></entry><entry><title>Passing the Cisco DevNet Associate Exam</title><link href="https://ignorantforager.com/passing-the-cisco-devnet-associate-exam.html" rel="alternate"/><published>2025-04-15T00:00:00-07:00</published><updated>2025-04-15T00:00:00-07:00</updated><author><name>Cadence James</name></author><id>tag:ignorantforager.com,2025-04-15:/passing-the-cisco-devnet-associate-exam.html</id><summary type="html">&lt;h1&gt;🚀 How I Passed the Cisco DevNet Associate Exam: My Study Strategy and Takeaways&lt;/h1&gt;
&lt;p&gt;Passing the &lt;strong&gt;Cisco Certified DevNet Associate&lt;/strong&gt; exam (DevAsc) was a major milestone on my journey into network automation and programmability. I want to share my study process in hopes it can help others approaching this certification.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;hr&gt;
&lt;h2&gt;🧠 My Study Approach: Structured Learning with Iterative Quizzing&lt;/h2&gt;
&lt;h3&gt;1. &lt;strong&gt;Starting with CBT Nuggets&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;I began by diving into the &lt;strong&gt;CBT Nuggets course&lt;/strong&gt; titled &lt;em&gt;Cisco DevNet Associate (200-901 DEVASC)&lt;/em&gt;. This course was comprehensive and provided a solid foundation on the key concepts of network automation and programmability. It covered topics like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cisco …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;🚀 How I Passed the Cisco DevNet Associate Exam: My Study Strategy and Takeaways&lt;/h1&gt;
&lt;p&gt;Passing the &lt;strong&gt;Cisco Certified DevNet Associate&lt;/strong&gt; exam (DevAsc) was a major milestone on my journey into network automation and programmability. I want to share my study process in hopes it can help others approaching this certification.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;hr&gt;
&lt;h2&gt;🧠 My Study Approach: Structured Learning with Iterative Quizzing&lt;/h2&gt;
&lt;h3&gt;1. &lt;strong&gt;Starting with CBT Nuggets&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;I began by diving into the &lt;strong&gt;CBT Nuggets course&lt;/strong&gt; titled &lt;em&gt;Cisco DevNet Associate (200-901 DEVASC)&lt;/em&gt;. This course was comprehensive and provided a solid foundation on the key concepts of network automation and programmability. It covered topics like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cisco platforms (e.g., Intersight, DNA Center, Meraki, NSO)&lt;/li&gt;
&lt;li&gt;Automation tools (e.g., Ansible, Netmiko, Python)&lt;/li&gt;
&lt;li&gt;APIs (REST, SOAP, AXL, CTI in CUCM)&lt;/li&gt;
&lt;li&gt;Authentication mechanisms (OAuth 2.0, Basic Auth, Bearer)&lt;/li&gt;
&lt;li&gt;Network protocols (SNMP, MDT)&lt;/li&gt;
&lt;li&gt;CI/CD practices and Infrastructure as Code (IaC)&lt;/li&gt;
&lt;li&gt;Unit testing and more&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This course gave me a good theoretical foundation, but I knew I needed to test my knowledge more rigorously.&lt;/p&gt;
&lt;h3&gt;2. &lt;strong&gt;Taking the Kaplan Practice Test&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Next, I took a &lt;strong&gt;practice test&lt;/strong&gt; provided by &lt;strong&gt;Kaplan&lt;/strong&gt;, which was included as part of the CBT Nuggets course. This gave me a solid gauge of where I stood in terms of readiness. The only downside was that it created a quiz based on a question bank of only 200 questions, which I quickly went through. However, I was able to pinpoint the areas where I needed further improvement. This step was crucial in tailoring the next phase of my study plan.&lt;/p&gt;
&lt;h3&gt;3. &lt;strong&gt;Using ChatGPT for Targeted Learning and Quizzes&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Once I identified the areas I struggled with, I turned to &lt;strong&gt;ChatGPT&lt;/strong&gt; for deeper explanations and to create &lt;strong&gt;custom quizzes&lt;/strong&gt;. ChatGPT helped me dig deeper into topics like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API request methods (GET, POST, PUT, DELETE)&lt;/li&gt;
&lt;li&gt;JSON, YAML, YANG, and NETCONF&lt;/li&gt;
&lt;li&gt;Ansible vs. Python scripting&lt;/li&gt;
&lt;li&gt;SD-WAN and Meraki comparisons&lt;/li&gt;
&lt;li&gt;Authentication methods (OAuth vs. Basic Auth)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ChatGPT quizzes were incredibly helpful as they allowed me to test my understanding of specific concepts. Initially, I started with standard multiple-choice questions but quickly wanted a more challenging approach. Instead of simply receiving a question with answer choices, I asked ChatGPT to provide the question alone. I would then explain my reasoning and how I arrived at my answer. ChatGPT would confirm whether my response was correct and offer additional context to help solidify my understanding.&lt;/p&gt;
&lt;p&gt;If I got a question wrong, I would take the time to pause the quizzing and do a quick &lt;strong&gt;deep dive&lt;/strong&gt; on that specific topic to reinforce my understanding. This process of revisiting areas where I was weak allowed me to improve steadily and get comfortable with even the trickier concepts.&lt;/p&gt;
&lt;h3&gt;4. &lt;strong&gt;Expanding to a General Overview with ChatGPT Quizzes&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;After successfully improving in the targeted areas, I broadened my review with more &lt;strong&gt;general DevNet exam questions&lt;/strong&gt;. ChatGPT provided quizzes that spanned the entire exam, covering topics from APIs to CI/CD, and everything in between. The quizzes helped me solidify my knowledge and ensure I was prepared for any part of the exam.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;🔁 Learning by Iteration&lt;/h2&gt;
&lt;p&gt;One of the biggest takeaways for me was the power of &lt;strong&gt;active learning&lt;/strong&gt;. Rather than just reading through material, I actively engaged by taking quizzes, working through problems, and using ChatGPT to clarify difficult concepts. By iterating on what I had learned, I gained a much stronger grasp of the material.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;📘 Exam Tips&lt;/h2&gt;
&lt;p&gt;Here are some of the key things I recommend you focus on when studying for the DevNet Associate exam:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cisco platforms&lt;/strong&gt;: Be able to compare and contrast them (e.g., when to use NSO vs. Meraki).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP methods&lt;/strong&gt;: Know the difference between &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, and where they fit in REST APIs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data formats&lt;/strong&gt;: Understand the ins and outs of &lt;strong&gt;JSON&lt;/strong&gt;, &lt;strong&gt;YAML&lt;/strong&gt;, &lt;strong&gt;YANG&lt;/strong&gt;, and &lt;strong&gt;NETCONF&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CI/CD pipelines&lt;/strong&gt;: Be familiar with concepts around &lt;strong&gt;Continuous Integration&lt;/strong&gt; and &lt;strong&gt;Continuous Delivery&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Version control&lt;/strong&gt;: Understand how &lt;strong&gt;Git&lt;/strong&gt; works and its role in collaboration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Authentication mechanisms&lt;/strong&gt;: Differentiate between &lt;strong&gt;OAuth 2.0&lt;/strong&gt; and &lt;strong&gt;Basic Auth&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unit testing&lt;/strong&gt;: Know when to use &lt;strong&gt;unit testing&lt;/strong&gt; frameworks like &lt;code&gt;unittest&lt;/code&gt; and how they fit into the DevNet workflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;📋 My Exam Experience&lt;/h2&gt;
&lt;p&gt;I’ve gotten into the habit of taking exams in a &lt;strong&gt;testing center&lt;/strong&gt; instead of at home. This helps me focus and ensures I’m in the right mindset as well as removing any potential distractions and worries that I have my work area all set up. Since I started taking exams in testing centers (knock on wood), I haven’t failed any of the exams I’ve taken there.&lt;/p&gt;
&lt;p&gt;When I first sat down for the exam, I’ll admit, I was nervous. However, once I got into the groove of answering the questions, those nerves started to fade away. The ChatGPT quizzes were incredibly helpful, and there were at least two questions that were directly related to my learning there. Otherwise, there was never a point where I felt completely thrown off. All of the questions were in line with the practice quizzes I had taken, and I felt prepared for what came my way.&lt;/p&gt;
&lt;p&gt;Of course, there were a few questions where I didn’t know the exact answer or wasn’t sure about the reasoning behind the options, but what would a quiz be without a few challenges?&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;💬 Final Thoughts&lt;/h2&gt;
&lt;p&gt;Passing the DevNet Associate exam wasn’t just about memorizing concepts; it was about actively engaging with the material, testing my knowledge, and iterating until I was confident. By combining the &lt;strong&gt;CBT Nuggets course&lt;/strong&gt;, &lt;strong&gt;Kaplan practice tests&lt;/strong&gt;, and &lt;strong&gt;ChatGPT quizzes&lt;/strong&gt;, I was able to build a strong foundation and thoroughly prepare for the exam.&lt;/p&gt;</content><category term="networking"/><category term="cisco"/><category term="exam"/></entry><entry><title>Querying Service Desk Call Metrics with Python</title><link href="https://ignorantforager.com/querying-service-desk-call-metrics-with-python.html" rel="alternate"/><published>2025-02-28T00:00:00-08:00</published><updated>2025-02-28T00:00:00-08:00</updated><author><name>Cadence James</name></author><id>tag:ignorantforager.com,2025-02-28:/querying-service-desk-call-metrics-with-python.html</id><summary type="html">&lt;h1&gt;Extracting Metrics from Cisco Unified Call Manager (CUCM)&lt;/h1&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;About a year and a half ago, I was asked to find a way to extract metrics from Cisco Unified Call Manager (CUCM) to support our Service Desk team. They needed basic insights:
- How many calls were made to the service desk
- Who answered the calls
- How many calls went to voicemail&lt;/p&gt;
&lt;p&gt;Over time, additional requests came in, such as tracking evening-hour calls to determine if extra support was needed.&lt;/p&gt;
&lt;h2&gt;Initial Challenges&lt;/h2&gt;
&lt;p&gt;After some research, I found that CUCM didn’t provide an easy way to access this information through its …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Extracting Metrics from Cisco Unified Call Manager (CUCM)&lt;/h1&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;About a year and a half ago, I was asked to find a way to extract metrics from Cisco Unified Call Manager (CUCM) to support our Service Desk team. They needed basic insights:
- How many calls were made to the service desk
- Who answered the calls
- How many calls went to voicemail&lt;/p&gt;
&lt;p&gt;Over time, additional requests came in, such as tracking evening-hour calls to determine if extra support was needed.&lt;/p&gt;
&lt;h2&gt;Initial Challenges&lt;/h2&gt;
&lt;p&gt;After some research, I found that CUCM didn’t provide an easy way to access this information through its GUI. Eventually, I discovered the Call Detail Record (CDR) page, but it had significant limitations:
- It only allowed me to export 30 days of logs manually as a CSV file.
- There was no built-in automation for data retrieval.
- Each CSV contained tens of thousands of rows of call data.&lt;/p&gt;
&lt;p&gt;The challenge then became parsing through it to extract meaningful information.&lt;/p&gt;
&lt;h2&gt;Key CDR Fields&lt;/h2&gt;
&lt;p&gt;I won’t go into all the details of the CDR fields—it’s a massive dataset—but a few key fields for my purposes were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;dateTimeOrigination&lt;/code&gt;&lt;/strong&gt;: The date and time when the user goes off the hook or when an H.323 SETUP message is received for an incoming call.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;originalCalledPartyPattern&lt;/code&gt;&lt;/strong&gt;: The original call destination before any translations are applied.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;finalCalledPartyPattern&lt;/code&gt;&lt;/strong&gt;: The final call destination before it is answered or ringing ends.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;destDeviceName&lt;/code&gt;&lt;/strong&gt;: The name of the destination device.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a more comprehensive breakdown of CDR fields, I found this resource invaluable: &lt;a href="https://www.voipdetective.com/unified-communications/reading-and-understanding-cucm-cdr-files/"&gt;Understanding CUCM CDR Files&lt;/a&gt;. Additionally, here’s an official Cisco link with CDR codes: &lt;a href="https://www.cisco.com/c/en/us/td/docs/voice_ip_comm/cucm/service/12_5_1/cdrdef/cucm_b_cdr-admin-guide-1251/cucm_b_cdr-admin-guide-1251_chapter_0110.html"&gt;Cisco CDR Codes&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Initial Solution: PowerShell Script&lt;/h2&gt;
&lt;p&gt;With this information in hand, I needed a way to process it efficiently. At the time, I relied on PowerShell for automation, so I wrote a script to:
1. Parse the CDR.
2. Filter for Help Desk calls.
3. Extract the requested details.&lt;/p&gt;
&lt;p&gt;After parsing the data, I would then put all of this data neatly into an excel file with PivotTables and PivotCharts. Then sent the information out to the parties requesting the information.&lt;/p&gt;
&lt;h3&gt;Issues with PowerShell Approach&lt;/h3&gt;
&lt;p&gt;However, the PowerShell solution had major flaws:
- &lt;strong&gt;Not dynamic&lt;/strong&gt;: I had to manually list all help desk phones by device name.
- &lt;strong&gt;Required manual updates&lt;/strong&gt;: Any staff changes meant manually updating the script.
- &lt;strong&gt;Inefficient and slow&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For the past year and a half, I dealt with these limitations. But this week, I decided to fix them.&lt;/p&gt;
&lt;h2&gt;Improved Solution: Python Script&lt;/h2&gt;
&lt;p&gt;Below is a Python script that replicates the PowerShell functionality with crucial improvements, mainly minimizing manual input.&lt;/p&gt;
&lt;p&gt;I achieved this using the CUCM &lt;strong&gt;SOAP/AXL API&lt;/strong&gt;. (If you're unfamiliar with it, I wrote a &lt;a href="https://ignorantforager.com/posts/query-cucm-sql/"&gt;previous post&lt;/a&gt; about it. While it’s not exhaustive, it’s a good starting point if you're interested.)&lt;/p&gt;
&lt;h3&gt;Key Improvements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dynamic device retrieval&lt;/strong&gt;: A custom SQL query now fetches the current list of Help Desk devices from CUCM, eliminating the need for manual updates.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Device correlation&lt;/strong&gt;: Each device is linked with its description and primary phone number using a non-SQL query to CUCM.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;

&lt;span class="c1"&gt;#### Initialize CUCM settings&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;192.168.1.1/axl&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# Adjust URL for CUCM Publisher IP Address&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Basic &amp;lt;BASIC AUTH HERE&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Replace with actual authentication&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;COOKIE HERE&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# Replace with actual cookie if required&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filterwarnings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urllib3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InsecureRequestsWarning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Suppress SSL warnings&lt;/span&gt;

&lt;span class="c1"&gt;# Define XML namespace for parsing responses&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;soapenv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ns&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.cisco.com/AXL/API/14.0&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Define constants&lt;/span&gt;
&lt;span class="n"&gt;helpDesk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5551234&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# Help desk phone number&lt;/span&gt;
&lt;span class="n"&gt;voicemail_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;VOICEMAIL_SERVER&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# Voicemail server identifier&lt;/span&gt;

&lt;span class="c1"&gt;#### Read CDR (Call Detail Records) from CSV file&lt;/span&gt;
&lt;span class="n"&gt;cdr_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cdr.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;low_memory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#### Setting time zones and converting timestamps&lt;/span&gt;
&lt;span class="n"&gt;utc_zone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;
&lt;span class="n"&gt;eastern_zone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;America/New_York&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Convert start time to Eastern Time&lt;/span&gt;
&lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cdr_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeOrigination&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utc_zone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eastern_zone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Convert end time to Eastern Time&lt;/span&gt;
&lt;span class="n"&gt;endTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cdr_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeOrigination&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;endTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utc_zone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eastern_zone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;endTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#### Retrieve help desk phone devices via AXL API (replace the fknumplan id with the one specific to the help desk line)&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;lt;soapenv:Envelope xmlns:soapenv=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;http://schemas.xmlsoap.org/soap/envelope/&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt; xmlns:ns=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;http://www.cisco.com/AXL/API/14.0&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;lt;soapenv:Header /&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;lt;soapenv:Body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;ns:executeSQLQuery&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;sql&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    SELECT d.name, d.description&lt;/span&gt;
&lt;span class="s2"&gt;                    FROM devicenumplanmap as dnpm&lt;/span&gt;
&lt;span class="s2"&gt;                    INNER JOIN device AS d ON dnpm.fkdevice = d.pkid&lt;/span&gt;
&lt;span class="s2"&gt;                    WHERE dnpm.fknumplan = &amp;#39;c3f97eb6-aeae-280d-1aaf-9d2c47528011&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/sql&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;/ns:executeSQLQuery&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;lt;/soapenv:Body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;lt;/soapenv:Envelope&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;responseText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Parse device names and descriptions from XML response&lt;/span&gt;
&lt;span class="n"&gt;device_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//ns:executeSQLQueryResponse/return/row/name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;descriptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//ns:executeSQLQueryResponse/return/row/description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;phones&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;device_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;device_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;descriptions&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

&lt;span class="c1"&gt;#### Sort calls into different categories&lt;/span&gt;
&lt;span class="n"&gt;helpDeskCalls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cdr_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cdr_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;originalCalledPartyPattern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;helpDesk&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;helpDeskAnswered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;finalCalledPartyPattern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;helpDesk&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Identify calls that reached voicemail&lt;/span&gt;
&lt;span class="n"&gt;voicemailCalls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;finalCalledPartyPattern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;8888&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;voicemailCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeOrigination&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;voicemailCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeOrigination&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;voicemailCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeEastern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;voicemailCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeOrigination&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz_convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eastern_zone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Convert call timestamps&lt;/span&gt;
&lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeOrigination&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeOrigination&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeEastern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeOrigination&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz_convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eastern_zone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Identify calls made between 5 PM and 8 PM&lt;/span&gt;
&lt;span class="n"&gt;eveningCalls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeEastern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeEastern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#### Count calls per device&lt;/span&gt;
&lt;span class="n"&gt;calling_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;destDeviceName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;call_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calling_numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DeviceName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CallCount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DeviceName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phones&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DeviceName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;voicemail_server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Voicemail&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unknown&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#### Retrieve phone numbers for devices using AXL API&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterrows&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DeviceName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;voicemail_server&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PhoneNumber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8888&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;lt;soapenv:Envelope xmlns:soapenv=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;http://schemas.xmlsoap.org/soap/envelope/&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt; xmlns:ns=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;http://www.cisco.com/AXL/API/14.0&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;soapenv:Header /&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;soapenv:Body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;ns:getPhone&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;name&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/ns:getPhone&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;/soapenv:Body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;lt;/soapenv:Envelope&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;responseText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;phone_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//ns:getPhoneResponse/return/phone/lines/line/dirn/pattern&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespaces&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;phone_numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;phone_numbers&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Unknown&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PhoneNumber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;phone_number&lt;/span&gt;

&lt;span class="c1"&gt;# Organize call counts data&lt;/span&gt;
&lt;span class="n"&gt;call_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PhoneNumber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DeviceName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CallCount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;call_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PhoneNumber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ascending&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#### Output evening and voicemail calls to text files&lt;/span&gt;
&lt;span class="n"&gt;evening_calls_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eveningCalls&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeEastern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;evening_calls.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evening_calls_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;voicemail_calls_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;voicemailCalls&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dateTimeEastern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;voicemail_calls.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;voicemail_calls_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#### Print summary information&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;---------------------------&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Start Time: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;End Time: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;endTime&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;---------------------------&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total Calls: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cdr_df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total Help Desk Calls: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;helpDeskCalls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total Help Desk Voicemails: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;voicemailCalls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total 5-8 Calls made: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eveningCalls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;---------------------------&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_counts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;---------------------------&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Remaining Challenges&lt;/h2&gt;
&lt;p&gt;This solution is about &lt;strong&gt;75% automated&lt;/strong&gt; (98.7% of all stats are made up, this one included). The biggest remaining manual task is &lt;strong&gt;downloading the CSV file&lt;/strong&gt;. Additionally, I still &lt;strong&gt;import the data into Excel&lt;/strong&gt; for visualization. Though I know Python has libraries for this, I lack the access to Python’s visualization tools, which is an unfortunate limitation for now.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall, this approach is a significant improvement over my previous workflow, making Service Desk call metrics tracking much more efficient.&lt;/p&gt;</content><category term="networking"/><category term="cisco"/><category term="cucm"/><category term="sql"/><category term="api"/><category term="python"/></entry><entry><title>Fixing Plex Docker Failures - Resolving Disk Space Issues and Optimizing Storage</title><link href="https://ignorantforager.com/fixing-plex-docker-failures-resolving-disk-space-issues-and-optimizing-storage.html" rel="alternate"/><published>2025-02-11T00:00:00-08:00</published><updated>2025-02-11T00:00:00-08:00</updated><author><name>Cadence James</name></author><id>tag:ignorantforager.com,2025-02-11:/fixing-plex-docker-failures-resolving-disk-space-issues-and-optimizing-storage.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Managing disk space efficiently is crucial for maintaining a stable Plex Media Server, especially when running it as a Docker container on an Ubuntu Live Server VM. Recently, I encountered a critical issue where Plex failed to start and transcode media due to insufficient disk space. Additionally, system updates were blocked due to a full root partition. This post details the root cause analysis, troubleshooting steps, and resolution strategies, including mounting a secondary drive for Plex storage. By following these steps, you can prevent similar issues and optimize your Plex server’s performance.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Issue Summary:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Plex Media Server, running …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Managing disk space efficiently is crucial for maintaining a stable Plex Media Server, especially when running it as a Docker container on an Ubuntu Live Server VM. Recently, I encountered a critical issue where Plex failed to start and transcode media due to insufficient disk space. Additionally, system updates were blocked due to a full root partition. This post details the root cause analysis, troubleshooting steps, and resolution strategies, including mounting a secondary drive for Plex storage. By following these steps, you can prevent similar issues and optimize your Plex server’s performance.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Issue Summary:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Plex Media Server, running as a Docker container on an Ubuntu Live Server VM (hosted on Proxmox), was failing to start properly. Additionally, Plex playback issues occurred when attempting to transcode media, displaying an error stating, "There's not enough space to convert this item." Furthermore, attempting to update Ubuntu (&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&lt;/code&gt;) resulted in the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;You&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;don&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t have enough free space in /var/cache/apt/archives/.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&lt;strong&gt;Error Messages from Plex Logs:&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Upon examining the Plex logs, the following critical error was identified:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;Starting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Plex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Media&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ignore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;libusb_init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;libc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;terminating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;uncaught&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;runtime_error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Codecs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;filesystem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;create_directories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;No&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/config/Library/Application Support/Plex Media Server/Codecs/e613bce-97f23d579c1001d8e9cc0d2e-linux-x86_64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/config/Library/Application Support/Plex Media Server/Codecs/e613bce-97f23d579c1001d8e9cc0d2e-linux-x86_64&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;******&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;PLEX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MEDIA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SERVER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CRASHED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CRASH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;REPORT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;WRITTEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Support&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Plex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Media&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Crash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Reports&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;Root Cause Analysis:&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Root Filesystem Full:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Running &lt;code&gt;df -h&lt;/code&gt; revealed that the root partition (&lt;code&gt;/dev/mapper/ubuntu--vg-ubuntu--lv&lt;/code&gt;) was &lt;strong&gt;100% full&lt;/strong&gt;, preventing Plex from writing necessary codec files and causing transcode failures.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Plex container's &lt;code&gt;/config&lt;/code&gt; directory was mapped to &lt;code&gt;/var/plex/config&lt;/code&gt;, which resided on the full root partition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Newly Added 2TB Drive Not Utilized:&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;The Proxmox VM had a secondary &lt;strong&gt;2TB drive&lt;/strong&gt; (&lt;code&gt;/dev/sdb&lt;/code&gt;), but it was not formatted, mounted, or used.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plex was relying on the small root partition for cache, transcoding, and metadata storage, causing failures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Docker Storage Usage:&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Running &lt;code&gt;docker system df&lt;/code&gt; showed that there were no unused images or containers, so &lt;code&gt;docker system prune&lt;/code&gt; was not necessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;strong&gt;Resolution Steps:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To resolve the issue, we took the following steps:&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Step 1: Free Up Space on Root Filesystem&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Clean APT cache:&lt;/strong&gt;
   &lt;code&gt;bash
   sudo apt clean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove old logs:&lt;/strong&gt;
   &lt;code&gt;bash
   sudo journalctl --vacuum-time=3d
   sudo rm -rf /var/log/*.gz /var/log/*.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identify and remove large unnecessary files:&lt;/strong&gt;
   &lt;code&gt;bash
   sudo du -ahx / | sort -rh | head -20&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;&lt;strong&gt;Step 2: Mount the 2TB Drive and Move Plex Config and Transcoding Data&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Format the 2TB disk (&lt;code&gt;/dev/sdb&lt;/code&gt;):&lt;/strong&gt;
   &lt;code&gt;bash
   sudo mkfs.ext4 /dev/sdb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a mount point:&lt;/strong&gt;
   &lt;code&gt;bash
   sudo mkdir -p /mnt/plex_config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mount the new drive:&lt;/strong&gt;
   &lt;code&gt;bash
   sudo mount /dev/sdb /mnt/plex_config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Move Plex configuration and transcode directories to the new drive:&lt;/strong&gt;
   &lt;code&gt;bash
   docker stop plex
   sudo mv /var/plex/config /mnt/plex_config/
   sudo mv /var/plex/transcode /mnt/plex_config/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ensure correct permissions:&lt;/strong&gt;
   &lt;code&gt;bash
   sudo chown -R administrator:administrator /mnt/plex_config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update Docker container settings to use the new location:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Modify &lt;code&gt;docker-compose.yml&lt;/code&gt; or the &lt;code&gt;docker run&lt;/code&gt; command to reflect the new paths:
     &lt;code&gt;bash
     -v /mnt/plex_config/config:/config
     -v /mnt/plex_config/transcode:/transcode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Persist the mount by adding it to &lt;code&gt;/etc/fstab&lt;/code&gt;:&lt;/strong&gt;
   &lt;code&gt;bash
   /dev/sdb /mnt/plex_config ext4 defaults 0 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reboot and verify the mount persists:&lt;/strong&gt;
   &lt;code&gt;bash
   sudo reboot&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;&lt;strong&gt;Step 3: Restart Plex and Verify Functionality&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Start the Plex container:&lt;/strong&gt;
   &lt;code&gt;bash
   docker start plex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Verify Plex is running without errors:&lt;/strong&gt;
   &lt;code&gt;bash
   docker logs plex -f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attempt media playback and confirm that transcoding works without errors.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;strong&gt;Final Outcome:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;✅ Plex no longer crashes due to disk space issues.&lt;br&gt;
✅ APT updates and system operations work without errors.&lt;br&gt;
✅ Transcoding and playback are stable.&lt;br&gt;
✅ The root filesystem has ample free space, preventing future failures.  &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Preventive Measures for Future Issues:&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Monitor disk usage regularly:&lt;/strong&gt;
   &lt;code&gt;bash
   df -h
   docker system df&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Periodically clean up old logs and temporary files.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ensure new storage devices are properly formatted, mounted, and utilized as needed.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="homelab"/><category term="homelab"/><category term="plex"/><category term="docker"/><category term="storage"/></entry><entry><title>A Practical Approach to Finding 100GB QSFPs</title><link href="https://ignorantforager.com/a-practical-approach-to-finding-100gb-qsfps.html" rel="alternate"/><published>2024-05-02T00:00:00-07:00</published><updated>2024-05-02T00:00:00-07:00</updated><author><name>Cadence James</name></author><id>tag:ignorantforager.com,2024-05-02:/a-practical-approach-to-finding-100gb-qsfps.html</id><summary type="html">&lt;h2&gt;Automating 100GB QSFP Transceiver Inventory with PowerShell&lt;/h2&gt;
&lt;p&gt;Understanding the quantity and distribution of 100GB QSFP transceivers in your data center can be essential for optimizing network performance. But how can you efficiently gather this information across multiple devices? Let me share with you a straightforward method I’ve developed using PowerShell, which you can adapt to suit your environment.&lt;/p&gt;
&lt;p&gt;Firstly, I typically start by SSH’ing into my devices to manually gather information. This initial exploration helps me identify patterns that can be automated later. One command I’ve found to be particularly useful is &lt;code&gt;show interface transceiver&lt;/code&gt;, which lists …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Automating 100GB QSFP Transceiver Inventory with PowerShell&lt;/h2&gt;
&lt;p&gt;Understanding the quantity and distribution of 100GB QSFP transceivers in your data center can be essential for optimizing network performance. But how can you efficiently gather this information across multiple devices? Let me share with you a straightforward method I’ve developed using PowerShell, which you can adapt to suit your environment.&lt;/p&gt;
&lt;p&gt;Firstly, I typically start by SSH’ing into my devices to manually gather information. This initial exploration helps me identify patterns that can be automated later. One command I’ve found to be particularly useful is &lt;code&gt;show interface transceiver&lt;/code&gt;, which lists all SFP transceivers used on the device. By filtering for lines containing &lt;code&gt;40/100&lt;/code&gt;, I can quickly identify 100GB QSFPs.&lt;/p&gt;
&lt;h3&gt;PowerShell Script for Automating the Process&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# Prompt the user to enter a username and password&lt;/span&gt;
&lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Read-Host&lt;/span&gt; &lt;span class="n"&gt;-Prompt&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Username&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Read-Host&lt;/span&gt; &lt;span class="n"&gt;-Prompt&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Password&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;-AsSecureString&lt;/span&gt;

&lt;span class="c"&gt;# Convert the SecureString password into a plain text string (security risk!)&lt;/span&gt;
&lt;span class="nv"&gt;$temppass&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="no"&gt;[System.Runtime.InteropServices.Marshal]&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SecureStringToCoTaskMemUnicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="no"&gt;[System.Runtime.InteropServices.Marshal]&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PtrToStringUni&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$temppass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Import device list from a CSV file (expects a file named &amp;#39;devices.csv&amp;#39; in the same directory)&lt;/span&gt;
&lt;span class="nv"&gt;$devices&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Import-Csv&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.\devices.csv&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Initialize counters and a variable to store transceiver count&lt;/span&gt;
&lt;span class="nv"&gt;$totalcount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;$count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;$t&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$null&lt;/span&gt;

&lt;span class="c"&gt;# Loop through each device listed in the CSV file&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$device&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$devices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;Clear &lt;/span&gt; &lt;span class="c"&gt;# Clears the screen for a cleaner output&lt;/span&gt;

    &lt;span class="c"&gt;# Display progress information&lt;/span&gt;
    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; ------------------------&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;-foreground&lt;/span&gt; &lt;span class="n"&gt;Cyan&lt;/span&gt;
    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; Querying device: $count of &lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$devices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;-foreground&lt;/span&gt; &lt;span class="n"&gt;Cyan&lt;/span&gt;
    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; ------------------------&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;-foreground&lt;/span&gt; &lt;span class="n"&gt;Cyan&lt;/span&gt;
    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;# Test connectivity to the device using its IP address (returns $True if reachable)&lt;/span&gt;
    &lt;span class="nv"&gt;$testconnection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Test-Connection&lt;/span&gt; &lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipaddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-Count&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt; &lt;span class="n"&gt;-Quiet&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$testconnection&lt;/span&gt; &lt;span class="o"&gt;-eq&lt;/span&gt; &lt;span class="nv"&gt;$True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;# Attempt an SSH connection using Plink (first echo y to accept new SSH host keys)&lt;/span&gt;
        &lt;span class="nb"&gt;echo &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;plink&lt;/span&gt; &lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipaddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-ssh&lt;/span&gt;

        &lt;span class="c"&gt;# Execute a command remotely to check for 40/100Gb transceivers&lt;/span&gt;
        &lt;span class="nv"&gt;$t&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="n"&gt;plink&lt;/span&gt; &lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipaddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-l&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="n"&gt;-pw&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="n"&gt;-batch&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;show interface transceiver | include 40/100&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Add the count of detected transceivers to the total&lt;/span&gt;
        &lt;span class="nv"&gt;$totalcount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$totalcount&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;# Increment the counter for device tracking&lt;/span&gt;
    &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Display the total count of detected QSFP transceivers&lt;/span&gt;
&lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; Total 100GB QSFP Transceivers: $totalcount&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Key Considerations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Password Handling:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This script converts the secure string into a regular string due to Plink’s inability to handle secure strings correctly.&lt;/li&gt;
&lt;li&gt;While it prevents shoulder surfing during password entry, handling passwords as plain text, even temporarily, poses security risks.&lt;/li&gt;
&lt;li&gt;Consider using SSH keys or credential vaults for improved security.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Device Input:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The script imports device information from a CSV file.&lt;/li&gt;
&lt;li&gt;You can adapt it to read from a text file if that better suits your setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Manual Progress Display:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of PowerShell’s built-in progress bar module, a manual display is used.&lt;/li&gt;
&lt;li&gt;The built-in progress bar tends to drift off-screen after iterating through many devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Plink Usage:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plink, the PuTTY CLI interface, is used for SSH access to Cisco devices.&lt;/li&gt;
&lt;li&gt;It provides a convenient way to query information across multiple devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Feel free to tailor this script to your needs and environment. With automation, you can streamline the process of gathering network inventory data, enabling better decision-making and optimization of your data center infrastructure.&lt;/p&gt;</content><category term="networking"/><category term="cisco"/><category term="powershell"/><category term="plink"/><category term="qsfp"/></entry><entry><title>Querying CUCM Database using SQL</title><link href="https://ignorantforager.com/querying-cucm-database-using-sql.html" rel="alternate"/><published>2024-05-01T00:00:00-07:00</published><updated>2024-05-01T00:00:00-07:00</updated><author><name>Cadence James</name></author><id>tag:ignorantforager.com,2024-05-01:/querying-cucm-database-using-sql.html</id><summary type="html">&lt;h2&gt;Exploring Cisco Unity Call Manager (CUCM) Database Access via Postman and SOAP/AXL API&lt;/h2&gt;
&lt;p&gt;Delving into the intricacies of Cisco Unity Call Manager (CUCM) database access via Postman and SOAP/AXL API opens up a realm of possibilities. While this won’t serve as a step-by-step guide, consider it a tour through a few essential examples, primarily focusing on leveraging custom SQL queries within Postman requests.&lt;/p&gt;
&lt;p&gt;If SQL isn’t in your skill set, this isn’t the tutorial where you’ll find comprehensive lessons. I’m no SQL guru myself, having only dabbled in it sparingly. Below, I’ll …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Exploring Cisco Unity Call Manager (CUCM) Database Access via Postman and SOAP/AXL API&lt;/h2&gt;
&lt;p&gt;Delving into the intricacies of Cisco Unity Call Manager (CUCM) database access via Postman and SOAP/AXL API opens up a realm of possibilities. While this won’t serve as a step-by-step guide, consider it a tour through a few essential examples, primarily focusing on leveraging custom SQL queries within Postman requests.&lt;/p&gt;
&lt;p&gt;If SQL isn’t in your skill set, this isn’t the tutorial where you’ll find comprehensive lessons. I’m no SQL guru myself, having only dabbled in it sparingly. Below, I’ll showcase a few examples of what I’ve managed to achieve with my modest understanding.&lt;/p&gt;
&lt;h3&gt;Querying End Users&lt;/h3&gt;
&lt;p&gt;To retrieve comprehensive details of a specific end user from the &lt;code&gt;enduser&lt;/code&gt; table, the following snippet can be employed within the Postman request body. Simply substitute &lt;code&gt;xxxxx&lt;/code&gt; in the SQL query’s last line with the target user’s username.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;soapenv:Envelope&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;xmlns:soapenv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;xmlns:ns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.cisco.com/AXL/API/14.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;soapenv:Header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;soapenv:Body&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ns:executeSQLQuery&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;sql&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;SELECT&lt;span class="w"&gt; &lt;/span&gt;*
&lt;span class="w"&gt;            &lt;/span&gt;FROM&lt;span class="w"&gt; &lt;/span&gt;enduser
&lt;span class="w"&gt;            &lt;/span&gt;WHERE&lt;span class="w"&gt; &lt;/span&gt;userid&lt;span class="w"&gt; &lt;/span&gt;=&lt;span class="w"&gt; &lt;/span&gt;&amp;#39;xxxxx&amp;#39;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/sql&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/ns:executeSQLQuery&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/soapenv:Body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/soapenv:Envelope&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Querying End Users and Their Associated Groups&lt;/h3&gt;
&lt;p&gt;This query is slightly more intricate but yields essential information about a user’s Primary Key ID (PKID) and the Foreign Key (FK) of the group(s) they belong to. Similar to the previous example, substitute &lt;code&gt;xxxxx&lt;/code&gt; with the target user’s ID.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;soapenv:Envelope&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;xmlns:soapenv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;xmlns:ns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.cisco.com/AXL/API/14.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;soapenv:Header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;soapenv:Body&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ns:executeSQLQuery&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;sql&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;SELECT&lt;span class="w"&gt; &lt;/span&gt;e.pkid,&lt;span class="w"&gt; &lt;/span&gt;m.fkdirgroup
&lt;span class="w"&gt;            &lt;/span&gt;FROM&lt;span class="w"&gt; &lt;/span&gt;enduserdirgroupmap&lt;span class="w"&gt; &lt;/span&gt;AS&lt;span class="w"&gt; &lt;/span&gt;m
&lt;span class="w"&gt;            &lt;/span&gt;INNER&lt;span class="w"&gt; &lt;/span&gt;JOIN&lt;span class="w"&gt; &lt;/span&gt;enduser&lt;span class="w"&gt; &lt;/span&gt;AS&lt;span class="w"&gt; &lt;/span&gt;e&lt;span class="w"&gt; &lt;/span&gt;ON&lt;span class="w"&gt; &lt;/span&gt;m.fkenduser&lt;span class="w"&gt; &lt;/span&gt;=&lt;span class="w"&gt; &lt;/span&gt;e.pkid
&lt;span class="w"&gt;            &lt;/span&gt;WHERE&lt;span class="w"&gt; &lt;/span&gt;e.userid&lt;span class="w"&gt; &lt;/span&gt;=&lt;span class="w"&gt; &lt;/span&gt;&amp;#39;xxxxx&amp;#39;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/sql&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/ns:executeSQLQuery&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/soapenv:Body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/soapenv:Envelope&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Exploring the capabilities of Cisco Unity Call Manager’s database through Postman and SQL queries unveils a world of administrative potential. While these examples offer a glimpse into its functionality, mastering these techniques can significantly amplify one’s ability to manage and optimize Cisco’s ecosystem efficiently.&lt;/p&gt;
&lt;p&gt;Whether you’re a seasoned administrator seeking to streamline operations or an enthusiast eager to dive into the intricacies of CUCM, leveraging Postman and SQL queries provides a powerful toolkit. With continued exploration and practice, you’ll unlock even greater insights and efficiencies within your Cisco infrastructure.&lt;/p&gt;</content><category term="networking"/><category term="cisco"/><category term="cucm"/><category term="sql"/><category term="api"/><category term="postman"/></entry></feed>